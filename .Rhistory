shiny::runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-JustBreathe')
shiny::runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
shiny::runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
shiny::runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
?dashboardSidebar
?colorNumeric
runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
runApp('UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake')
# libraries
library(shiny)
library(devtools)
library(ggplot2)
library(shinydashboard)
library(scales) # needed for percent function
library(shinythemes) # themes for bootstrapPage, fluidPage, navbarPage, or fixedPage
library(dashboardthemes)
library(ggthemes)
library(shinyalert)
library(leaflet)
library(rgdal)
library(geojson)
library(geojsonio)
library(colourpicker)
library(shinyWidgets)
library(viridis) # Color palette
library(cdlTools) # convert FIPS codes into names
library(htmltools) # to use htmlEscape function
library(plotly)
library(RColorBrewer)
library(reshape2)
library(fst)
library(future)
library(data.table)
# importing datasets
setwd("./csv/")
temp = list.files(pattern="*.csv")
datasets = lapply(temp, read.csv)
dataset <- do.call(rbind, datasets)
setwd("../")
daily_df <- read_fst("fst/daily_all_aqi_by_county.fst")
names(daily_df) <- c("state","county","aqi","category","pollutant","year","month","day")
daily_all <- read_fst("fst/daily_all_pollutants_2018.fst")
hourly_df <- read_fst("fst/hourly_all_data_2018.fst")
# needed for counties coordinates
sites <- fread(file = "sites/aqs_sites.csv", sep=",",header = TRUE)
# geojson file for counties shape
f_xy <- future({
xy <- geojsonio::geojson_read("gz_2010_us_050_00_20m.json", what = "sp")
# Since the xy has factored FIPS code for state instead of names, converting them in numeric and then
# getting the names
converted_states_names <- fips(as.numeric(levels(xy$STATE))[xy$STATE],to="name")
xy$STATENAME<-converted_states_names
xy
}) %plan% multiprocess
########################################### PREPROCESSING #########################################
years<-c(1980:2018)
H_years<-c(2018) #years available for hourly data
H_months<-c("January","February","March","April","May","June","July","August","September","October","November","December")
H_days<-c(1:31)
states<-unique(dataset$State)
t<-subset(dataset, State == 'Illinois')
counties<-unique(t$County)
pollutants <- c("CO","NO2","Ozone","SO2","PM2.5","PM10")
pollutants_2 <- c("PM2.5","PM10","CO","NO2","Ozone","SO2")
statistics <- c("Median","Max","90th percentile")
# All counties with state
all_counties <- c()
for(s in states){
coun <- subset(dataset, State == s)
counti<-unique(coun$County)
counti <- paste(counti,"-",s)
all_counties <- c(all_counties,counti)
}
############################################################ ITALY ########################################################################################
italy_df <- read_fst("italy/daily_italy.fst")
cities_italy <- levels(unique(italy_df$city)) #preprocess data such that capitalization is proper
setwd("/Users/mirkomantovani/UIC/Visualization and Visual Analytics/VisualAnalytics-EveryBreathYouTake/")
# libraries
library(shiny)
library(devtools)
library(ggplot2)
library(shinydashboard)
library(scales) # needed for percent function
library(shinythemes) # themes for bootstrapPage, fluidPage, navbarPage, or fixedPage
library(dashboardthemes)
library(ggthemes)
library(shinyalert)
library(leaflet)
library(rgdal)
library(geojson)
library(geojsonio)
library(colourpicker)
library(shinyWidgets)
library(viridis) # Color palette
library(cdlTools) # convert FIPS codes into names
library(htmltools) # to use htmlEscape function
library(plotly)
library(RColorBrewer)
library(reshape2)
library(fst)
library(future)
library(data.table)
# importing datasets
setwd("./csv/")
temp = list.files(pattern="*.csv")
datasets = lapply(temp, read.csv)
dataset <- do.call(rbind, datasets)
setwd("../")
daily_df <- read_fst("fst/daily_all_aqi_by_county.fst")
names(daily_df) <- c("state","county","aqi","category","pollutant","year","month","day")
daily_all <- read_fst("fst/daily_all_pollutants_2018.fst")
hourly_df <- read_fst("fst/hourly_all_data_2018.fst")
# needed for counties coordinates
sites <- fread(file = "sites/aqs_sites.csv", sep=",",header = TRUE)
# geojson file for counties shape
f_xy <- future({
xy <- geojsonio::geojson_read("gz_2010_us_050_00_20m.json", what = "sp")
# Since the xy has factored FIPS code for state instead of names, converting them in numeric and then
# getting the names
converted_states_names <- fips(as.numeric(levels(xy$STATE))[xy$STATE],to="name")
xy$STATENAME<-converted_states_names
xy
}) %plan% multiprocess
########################################### PREPROCESSING #########################################
years<-c(1980:2018)
H_years<-c(2018) #years available for hourly data
H_months<-c("January","February","March","April","May","June","July","August","September","October","November","December")
H_days<-c(1:31)
states<-unique(dataset$State)
t<-subset(dataset, State == 'Illinois')
counties<-unique(t$County)
pollutants <- c("CO","NO2","Ozone","SO2","PM2.5","PM10")
pollutants_2 <- c("PM2.5","PM10","CO","NO2","Ozone","SO2")
statistics <- c("Median","Max","90th percentile")
# All counties with state
all_counties <- c()
for(s in states){
coun <- subset(dataset, State == s)
counti<-unique(coun$County)
counti <- paste(counti,"-",s)
all_counties <- c(all_counties,counti)
}
############################################################ ITALY ########################################################################################
italy_df <- read_fst("italy/daily_italy.fst")
cities_italy <- levels(unique(italy_df$city)) #preprocess data such that capitalization is proper
View(dataset)
a <- subset(dataset, State='Illinois', County='Cook', Year = 2018)
View(a)
a <- subset(dataset, State='Illinois', County='Cook', Year = 2018)
a <- subset(dataset, State='Illinois', County='Cook')
sub<-subset(dataset, Year == 2018)
View(sub)
sub<-subset(sub, State = 'Illinois')
sub<-subset(sub, State = "Illinois")
View(sub)
sub<-subset(dataset, Year == 2017)
a <- subset(dataset, State=='Illinois', County=='Cook', Year == 2018)
a <- subset(dataset, State=='Illinois', County=='Cook', Year == 2018)
a <- subset(dataset, State=='Illinois', County=='Cook')
View(a)
sub<-subset(dataset, Year == 2018)
View(sub)
sub<-subset(sub, County == "Cook")
sub<-subset(dataset, Year == 2018)
View(sub)
sub$sel_feat<-sub[["Days.SO2"]]/sub$Days.with.AQI*100
View(sub)
sub2 <- sub[order(sub$sel_feat,decreasing = TRUE),]
View(sub2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
